1)
#define _CRT_SECURE_NO_WARNINGS
#include <iostream>
#include <conio.h>
#include <string.h>
#include <stdio.h>
using namespace std;
void main()
{
	char s[100],*p;
	int i = 0, j, nr, l;
	gets_s(s);
	p = s; //atribuire pointerului p adresa sirului s
	l = strlen(s); 
	while (i <= l - 1)
	{
		j = i + 1;
		nr = 0;
		while (j <= l - 1)
		{
			if (*(p+i) == *(p+j))
				while (*(p + i) == *(p + j))
				{
					strcpy(s + j, s + j + 1);
					nr++;
				}
			j++;
		}
		i++;
		l -= nr;
	}
	puts(s);
	_getch();
}

2)
#define _CRT_SECURE_NO_WARNINGS
#include <iostream>
#include <conio.h>
#include <string.h>
#include <stdio.h>
using namespace std;
void main()
{
	char s1[100],*p1,s2[100],*p2;
	int i = 0, j, nr, l1,l2;
	cout << "dati primul sir:\n ";
	gets_s(s1);
	cout << "\n dati al doilea sir:\n";
	gets_s(s2);
	p1 = s1;
	p2 = s2;
	l1 = strlen(s1);
	l2 = strlen(s2);
	int numar1 = 0,numar2=0;
	for (i = 0; i <= l1 - 1; i++)
	{
		nr = 0;
		for (j = 0; j <= l2 - 1; j++)
			if (*(p1 + i) == *(p2 + j)) nr++;
		if (nr == 0) numar1++;
	}
	cout << "numarul de caractere ce exista in sirul 1 si nu exista in sirul 2 este=" << numar1;
	for (i = 0; i <= l2 - 1; i++)
	{
		nr = 0;
		for (j = 0; j <= l1 - 1; j++)
			if (*(p2 + i) == *(p1 + j)) nr++;
		if (nr == 0) numar2++;
	}
	cout << "\nnumarul de caractere ce exista in sirul 2 si nu exista in sirul 1 este=" << numar2;
	cout << "\nin total ele difera prin " << numar1 + numar2 << " caractere";
	_getch();
}

3)
#define _CRT_SECURE_NO_WARNINGS
#include <iostream>
#include <conio.h>
using namespace std;
void prodscalar(int x,int *pa, int *pb);
int* citire(int x,int v[]);
void main()
{
	int n1, n2;
	int *p1,*p2,i;
	int v1[100], v2[100];
	cout << "dati numar elemente pt primul tablou,apoi elementele:";
	cin >> n1;
	p1=citire(n1,v1);
	cout << "\ndati numar elemente pt al doilea tablou,apoi elementele:";
	cin >> n2;
	p2 = citire(n2,v2);
	if (n2 > n1) prodscalar(n2,p1,p2);
	else prodscalar(n1,p1,p2);
	_getch();
}
int* citire(int x,int v[])
{
	int i, *pointer;
	for (i = 0; i <= x - 1; i++) cin >> v[i];
	pointer = v;
	return pointer;
}
void prodscalar(int x,int *pa,int *pb)
{
	int i,s=0;
	for (i = 0; i <= x - 1; i++)
	{
		s = s + (*(pa + i) * *(pb + i));
	}
	cout << "produsul scalar al celor 2 vectori este: " << s;
}

4)
#define _CRT_SECURE_NO_WARNINGS
#include <iostream>
#include <conio.h>
using namespace std;
int impare(int * p,int n);
void main()
{
	int i;
	int v[20];
	int *p;
	for (i = 0; i <= 19; i++) v[i] = rand() % 50;
	for (i = 0; i <= 19; i++) cout << v[i] << " ";
	p = v;
	cout << "\ndupa ce eliminam elementele impare vom avea:\n";
	impare(p, 19);
	for (i = 0; i <=19; i++) cout << v[i] << " ";
	_getch();
}
int impare(int*p, int n)
{
	int i = 0, j, nr = 0;
	bool k = false;
	while (k == false)
	{
		k = true;
		for (i = 0; i <= n; i++)
		{
			if (*(p + i) % 2 == 1)
			{
				k = false;
				for (j = i; j <= n; j++) *(p + j) = *(p + j + 1);
				*(p + n) = NULL;
				n--;
			}
		}
	}
	return 0;
}





5)
#define _CRT_SECURE_NO_WARNINGS
#include <iostream>
#include <conio.h>
using namespace std;
void functie(float x, int *point,int y);
void main()
{
	int v[100];
	int i, n, s = 0,*point;
	float med;
	cout << "cate elemente vreti sa cititi?";
	cin >> n;
	for (i = 0; i <= n - 1; i++)
	{
		cin >> v[i];
		s = s + v[i];
	}
	med = s / n;
	point = v;
	functie(med, point,n);
	_getch();
}
void functie(float x, int *point,int y)
{
	int vector[100],k=0,i;
	for (i = 0; i <= y - 1; i++)
	{
		if (*(point + i) > x)
		{
			vector[k] = *(point + i);
			k++;
		}
	}
	for (i = 0; i <= k-1; i++) cout << vector[i] << " ";
}

6)
#define _CRT_SECURE_NO_WARNINGS
#include <iostream>
#include <conio.h>
using namespace std;
void afis(char* p,int n);
void main()
{
	char s[100], *point;
	int n;
	gets_s(s);
	point = s;
	n = strlen(s);
	afis(point,n);
	_getch();
}
void afis(char*p, int n)
{
	char c = *p;
	int i, nr = 0,numar=0;
	for (i = 0; i <= n - 1; i++) 
		if (*(p + i)==' ') numar++;
	while (c != *(p + n))
	{
		nr = 0;
		for (i = 0; i <= n - 1; i++)
		{
			if (c == *(p + i)) 
			{
				nr++;
				*(p + i)=' ';
			}
		}
		if (c!=' ') cout << "\ncaracterul " << c << " apare de " << nr << " ori";
		p++;
		c = *p;
	}
	if (numar>0)	cout << "\ncaracterul spatiu apare de " << numar << " ori";
}