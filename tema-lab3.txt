1)

public class ex1 {

	public static void binar(int n) {
		System.out.println(Integer.toBinaryString(n));

	}

	public static void octal(int n) {
		System.out.println(Integer.toOctalString(n));
	}

	public static void hexa(int n) {
		System.out.println(Integer.toHexString(n));
	}

	public static void main(String[] args) {

		int x = 9;
		binar(x);
		octal(x);
		hexa(x);

	}

}


2)



import java.util.Scanner;
import java.util.Arrays;

public class ex2 {
	public static void Bubble(int[] v,int nr) {
		for (int i=0;i<nr-1;i++)
		{
			for (int j=i+1;j<nr;j++)
			{
				if (v[i]<v[j])
				{
					int aux=v[i];
					v[i]=v[j];
					v[j]=aux;
				}
			}
		}
	}
	
	public static void Insertion(int[] v,int nr) {
		int key,j;
		for (int i=1;i<nr;i++)
		{
			 key = v[i]; 
		     j = i - 1; 
		     while (j >= 0 && v[j] > key) { 
		            v[j + 1] = v[j]; 
		            j = j - 1; 
		        } 
		        v[j + 1] = key; 
		} 
	}
	
	
	public static void quickSort(int arr[], int begin, int end) {
	    if (begin < end) {
	        int partitionIndex = partition(arr, begin, end);
	 
	        quickSort(arr, begin, partitionIndex-1);
	        quickSort(arr, partitionIndex+1, end);
	    }
	}
	
	public static int partition(int arr[], int begin, int end) {
	    int pivot = arr[end];
	    int i = (begin-1);
	 
	    for (int j = begin; j < end; j++) {
	        if (arr[j] <= pivot) {
	            i++;
	 
	            int swapTemp = arr[i];
	            arr[i] = arr[j];
	            arr[j] = swapTemp;
	        }
	    }
	 
	    int swapTemp = arr[i+1];
	    arr[i+1] = arr[end];
	    arr[end] = swapTemp;
	 
	    return i+1;
	}
	
	
	public static int[] citire(int n) {

		int[] a = new int[n];
		Scanner input = new Scanner(System.in);
		for (int i = 0; i < n; i++)
		{
			 a[i] = input.nextInt();
		}
		return a;
	}
	
	public static void afisare(int[] v,int nr) {

		for (int i = 0; i < nr; i++)
		{
			 System.out.print(v[i] +" ");
		}
	}
	
		public static void main(String[] args)	{
			Scanner input = new Scanner(System.in);
			System.out.println("dati nr de elemente n: ");
			int n = input.nextInt();
			System.out.println("dati elementele:");
			int[] a=citire(n);
			Bubble(a,n);
			System.out.println("sortare cu bubble:\n");
			afisare(a,n);
			Insertion(a,n);
			System.out.println("sortare prin insertie:\n");
			afisare(a,n);
			System.out.println("sortare quicksort:\n");
			quickSort(a,1,n-1);
			afisare(a,n);
			
			
		}
		
	}


3)

import java.util.Scanner;

public class ex3 {



	public static void main(String[] args) {
		Scanner input = new Scanner(System.in);
		System.out.println("dati un nr:");
		int x = input.nextInt();
		System.out.println(Integer.toBinaryString(x));
		int mask = (1 << 8) - 1;
		while (x!=0)
		{
		int lastXbits = x & mask;
		System.out.println(Integer.toBinaryString(lastXbits)+ " "+Integer.toHexString(lastXbits)+" "+lastXbits);
		x=x>>8;
		}
	}

}


4)

import java.util.Scanner;
import java.util.Arrays;

public class ex4 {

	public static void afisare(int[][] a, int n, int m) {
		for (int i = 0; i < n; i++) {
			for (int j = 0; j < m; j++) {
				System.out.print(a[i][j] + " ");
			}
			System.out.println();
		}
	}

	public static void eliminare(int[][] a, int n, int m, int lim1, int lim2) {
		for (int i = 0; i < n; i++) {
			for (int j = 0; j < m; j++) {
				if ((a[i][j] < lim1) || (a[i][j] > lim2)) {
					a[i][j] = 0;
				}
			}
		}
		for (int i = 0; i < n; i++) {
			for (int j = 0; j < m; j++) {
				System.out.print(a[i][j] + " ");

			}
			System.out.println();
		}
	}

	public static void vecini(int[][] a, int n, int m, int i1, int i2) {
		int[][] v = new int[n + 2][m + 2];
		for (int i = 0; i < n + 2; i++) {
			for (int j = 0; j < m + 2; j++) {
				v[i][j] = 0;
			}
		}
		int in1 = 1;
		int in2 = 1;
		for (int i = 0; i < n; i++) {
			for (int j = 0; j < m; j++) {
				v[in1][in2] = a[i][j];
				in2++;
			}
			in1++;
			in2 = 1;
		}
		if (v[i1 + 1][i2] != 0)
			System.out.print(v[i1 + 1][i2] + " ");
		if (v[i1 - 1][i2] != 0)
			System.out.print(v[i1 - 1][i2] + " ");
		if (v[i1][i2 + 1] != 0)
			System.out.print(v[i1][i2 + 1] + " ");
		if (v[i1][i2 - 1] != 0)
			System.out.print(v[i1][i2 - 1] + " ");
	}

	public static void main(String[] args) {

		Scanner input = new Scanner(System.in);
		int n = input.nextInt();
		int m = input.nextInt();
		int[][] a = new int[n][m];
		for (int i = 0; i < n; i++)
			for (int j = 0; j < m; j++) {
				a[i][j] = input.nextInt();
			}
		afisare(a, n, m);
		System.out.println("introduceti 2 limite:");
		int lim1 = input.nextInt();
		int lim2 = input.nextInt();
		eliminare(a, n, m, lim1, lim2);
		System.out.print("dati indecsi pentru a afisa vecinii elementului cu acei indecsi:");
		int ind1 = input.nextInt();
		int ind2 = input.nextInt();
		vecini(a, n, m, ind1, ind2);
	}

} 

//s-o refac


5)

import java.util.Random;

public class ex5 {

	public static void main(String[] args) {
		Random rand = new Random();
		int x = rand.nextInt();
		int y = rand.nextInt();
		System.out.println("numerele sunt:" + x + y);
		System.out.println("inmultire=" + (x * y));
		System.out.println("impartire=" + (x / y));
		System.out.println("adunare=" + (x + y));
		System.out.println("scadere=" + (x - y));

	}

}


6)


public class ex6 {

	public static void main(String[] args) {
		int deck[] = new int[52];
		String[] suits = { "Hearts", "Diamonds", "Cupa", "Trefla" };
		String[] ranks = { "Ace", "2", "3", "4", "5", "6", "7", "8", "9", "10", "Jack", "Queen", "King" };
		for (int i = 0; i < deck.length; i++) {
			deck[i] += i;
		}
		for (int i = 0; i < deck.length; i++) {
			int index = (int) (Math.random() * deck.length);
			int x = deck[i];
			deck[i] = deck[index];
			deck[index] = x;
		}
		int i = 1;
		String suit = suits[deck[0] / 13];
		String rank = ranks[deck[0] % 13];
		char c= "8".charAt(0);
		System.out.println(c);
		System.out.println("am extras cartea cu numarul " + i + " " + "care este:" + rank + " " + suit);
		while ((suit != "Trefla") && (rank.charAt(0) < c)) {
			suit = suits[deck[i] / 13];
			rank = ranks[deck[i] % 13];
			System.out.println("am extras cartea cu numarul " + (i + 1) + " " + "care este:" + rank + " " + suit);
			i++;
		}
	}
}


7)

import java.util.Scanner;
import java.util.Arrays;

public class ex7 {

	public static void main(String[] args) {

		Scanner input = new Scanner(System.in);

		String A1 = new String();
		String B1 = new String();
		System.out.println("dati sirul A:");
		A1 = input.next();
		System.out.println("dati sirul B:");
		B1 = input.next();
		int[] index = new int[B1.length()];
		char[] A = new char[A1.length()];
		char[] B = new char[B1.length()];
		for (int i = 0; i < A1.length(); i++) {
			A[i] = A1.charAt(i);
		}
		for (int i = 0; i < B1.length(); i++) {
			B[i] = B1.charAt(i);
		}
		System.out.println("valorile asociate elementelor din sirul B: ");
		for (int i = 0; i < B1.length(); i++) {
			index[i] = (int) (Math.random() * 100 + 1);
			System.out.print(index[i]+" ");
		}
		System.out.println();
		int i = 0;
		int suma = 0;
		while (i < B1.length()) {
			for (int j = 0; j < A1.length(); j++) {
				if (B[i] == A[j]) {
					System.out.print("am gasit echivalenta pe pozitia:"+(j+1));
					System.out.println();
					suma += index[i] + (j+1);
				}
			}
			i++;
		}
		if (suma > 100)
			System.out.println("suma este=" + suma + " =>criptare reusita");
		else
			System.out.println("suma este=" + suma + " =>criptare nereusita");
	}
}



8)


import java.util.Scanner;
import java.util.Arrays;

public class ex8 {

	public static void Mutare(int k, char[][] Tabel) {
		if (k == 1) {
			System.out.println("Introduceti o pozitie de la 1 - 9 pe care sa punem X: ");
			Scanner input = new Scanner(System.in);
			int x = input.nextInt();
			int nr = 0;
			boolean kappa = false;
			while (kappa == false) {
				for (int i = 0; i < 3; i++)
					for (int j = 0; j < 3; j++) {
						nr++;
						if ((nr == x) && (Tabel[i][j] == '*')) {
							Tabel[i][j] = 'X';
							kappa = true;
						}
					}
				if (kappa == false) {
					System.out.println("Va rog introduceti o pozitie disponibila: ");
					x = input.nextInt();
					nr = 0;
				}
			}
		} else {
			System.out.println("Introduceti o pozitie de la 1 - 9 pe care sa punem 0: ");
			Scanner input = new Scanner(System.in);
			int x = input.nextInt();
			int nr = 0;
			boolean kappa = false;
			while (kappa == false) {
				for (int i = 0; i < 3; i++)
					for (int j = 0; j < 3; j++) {
						nr++;
						if ((nr == x) && (Tabel[i][j] == '*')) {
							Tabel[i][j] = '0';
							kappa = true;
						}
					}
				if (kappa == false) {
					System.out.println("Va rog introduceti o pozitie disponibila: ");
					x = input.nextInt();
					nr = 0;
				}
			}
		}

	}

	public static void showTable(char tabel[][]) {
		for (int i = 0; i < 3; i++) {
			for (int j = 0; j < 3; j++)
				System.out.print(tabel[i][j] + " ");
			System.out.println();
		}
	}

	public static boolean Castig(char[][] board, char player) {

		// check top row
		if (board[0][0] == player && board[0][1] == player && board[0][2] == player) {
			return true;

			// check middle row
		} else if (board[1][0] == player && board[1][1] == player && board[1][2] == player) {
			return true;

			// check bottom row
		} else if (board[2][0] == player && board[2][1] == player && board[2][2] == player) {
			return true;

			// check left column
		} else if (board[0][0] == player && board[1][0] == player && board[2][0] == player) {
			return true;

			// check middle column
		} else if (board[0][1] == player && board[1][1] == player && board[2][1] == player) {
			return true;

			// check right column
		} else if (board[0][2] == player && board[1][2] == player && board[2][2] == player) {
			return true;

			// check diagonal top-left to bottom-right
		} else if (board[0][0] == player && board[1][1] == player && board[2][2] == player) {
			return true;

			// check diagonal top-right to bottom-left
		} else if (board[0][2] == player && board[1][1] == player && board[2][0] == player) {
			return true;

			// no winning combination so return false
		} else {
			return false;
		}
	}

	public static void main(String[] args) {
		Scanner input = new Scanner(System.in);
		System.out.println("Introduceti numele jucatorului 1:");
		String A = input.next();
		System.out.println("Introduceti numele jucatorului 2:");
		String B = input.next();
		char Table[][] = new char[3][3];
		for (int i = 0; i < 3; i++)
			for (int j = 0; j < 3; j++)
				Table[i][j] = '*';
		showTable(Table);
		char player1 = 'X';
		char player2 = '0';
		boolean k = false;
		int nr = 1;
		int counter=0;
		while (k == false) {
			if ((counter==9)&&(k==false)) {
				System.out.println("Remiza!");
				showTable(Table);
				break;
			}
			Mutare(nr, Table);
			if (nr == 1) {
				k = Castig(Table, player1);
				nr = 2;
				if (k)
					System.out.println("Felicitari! " + A + " a castigat jocul.");
			} else {
				k = Castig(Table, player2);
				nr = 1;
				if (k)
					System.out.println("Felicitari! " + B + " a castigat jocul.");
			}
			showTable(Table);
			counter++;
		}
	}
}

