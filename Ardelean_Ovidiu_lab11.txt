1)
#define _CRT_SECURE_NO_WARNINGS
#include <iostream>
#include <stdlib.h>
#include <conio.h>
using namespace std;
void main()
{
	int n,i;
	cout << "cate numere vreti sa cititi? ";
	cin >> n;
	float*p,s=0;
	p = (float*)malloc(n * sizeof(float));
	cout << "dati numerele: ";
	for (i = 0; i < n; i++)
	{
		cin >> *(p + i);
	}
	for (i = 0; i < n; i++)
	{
		if (*(p + i) < 0) s = s + *(p + i);
	}
	free(p);
	cout << "suma elem negative este: " << s;
	_getch();
}


4)
#define _CRT_SECURE_NO_WARNINGS
#include <iostream>
#include <conio.h>
#include <stdlib.h>
using namespace std;
void main()
{
	int n, i, j,k;
	cout << "cate siruri de char vreti sa cititi? ";
	cin >> n;
	char **p = (char**)malloc(n * sizeof(char*));
	for (i = 0; i < n; i++)
	{
		cout << "ce lungime va avea sirul nr " << i + 1 << "? R:";
		cin >> k;
		p[i] = (char*)malloc(k * sizeof(char));
		cout << "scrieti sirul cu nr " << i + 1 << " aici: ";
		for (j = 0; j < k; j++) cin >> *(p[i] + j);
		*(p[i] + k) = '\0';
	}
	cout << "\na-ti introdus urmatoarele siruri:\n";
	for (i = 0; i < n; i++)
	{
		j = 0;
		while (*(p[i]+j) != '\0')
		{
			cout << *(p[i]+j);
			j++;
		}
		cout << endl;
	}
	_getch();
}

5)
#define _CRT_SECURE_NO_WARNINGS
#include <iostream>
#include <conio.h>
#include <stdlib.h>
#include <math.h>
#include <cmath>
using namespace std;
float* p;
void main()
{
	int N,i,k;
	float med=0;
	float rez = 0, Mn = 0,x;
	cout << "dati numarul de elemente N: ";
	cin >> N;
	p = (float*)malloc(N * sizeof(float));
	for (i = 0; i < N; i++)
	{
		cin >> *(p + i);
		med = med + *(p + i);
	}
	med = med / N;
	for (i = 0; i < N; i++)
	{
		x = *(p + i) - med;
		for (k = 1; k <= 3; k++) rez = rez + pow(x, k);
	}
	Mn = (float)rez / N;
	cout << "rezultatul este: " << Mn;
	_getch();
}

7)
#define _CRT_SECURE_NO_WARNINGS
#include <iostream>
#include <conio.h>
#include <stdlib.h>
#include <malloc.h>
#include <math.h>
using namespace std;
void main()
{

	int i, j, aux, max = 0,nr,val;
	int *p;
	if (p = (int*)malloc(10000 * sizeof(int*)))
	{
		for (i = 0; i < 10000; i++) *(p + i) = rand() % 100;

		for (i = 0; i < 10000 - 1; i++)
			for (j = i + 1; j < 10000; j++)
			{
				if (*(p + i) > *(p + j))
				{
					aux = *(p + i);
					*(p + i) = *(p + j);
					*(p + j) = aux;
				}
			}
		i = 0;
		while (i < 10000)
		{
			nr = 1;
			while (*(p + i) == *(p + i + 1))
			{
				nr++;
				i++;
			}
			if (max < nr)
			{
				max = nr;
				val = *(p + i);
			}
		}
		cout << "valoarea " << val << " apare cel mai des si anume de " << max << " ori.";
	}
	else cout << "imposibil de alocat";
	_getch();
}

8)
#define _CRT_SECURE_NO_WARNINGS
#include <iostream>
#include <conio.h>
#include <stdlib.h>
#include <malloc.h>
#include <math.h>
using namespace std;
void main()
{

	int i, n;
	int *p;
	float *p1;
	cout << "dati nr n:";
	cin >> n;
	p = (int*)malloc(n * sizeof(int));
	p1 = (float*)malloc(n * sizeof(float));
	for (i = 0; i < n; i++)
	{
		cin >> *(p + i);
		*(p1 + i) = sqrt(*(p + i));
	}
	free(p);
	cout << "radicalul numerelor este:\n";
	for (i = 0; i < n; i++) cout << *(p1 + i) << " ";
	free(p1);
	_getch();
}

9)
#define _CRT_SECURE_NO_WARNINGS
#include <iostream>
#include <conio.h>
#include <stdlib.h>
using namespace std;
void main()
{
	int n, i, j, k, x = 0, nr = 1, t;
	char *p1;
	cout << "de cate ori vreti sa folositi aplicatia? ";
	cin >> t;
	do
	{
	cout << "aceasta este utilizarea cu numarul:" << nr<<" va rog sa continuati...\n";
	cout << "cate siruri de char vreti sa cititi? ";
	cin >> n;
	char **p = (char**)malloc(n * sizeof(char*));
	for (i = 0; i < n; i++)
	{
		cout << "ce lungime va avea sirul nr " << i + 1 << "? R:";
		cin >> k;
		x = x + k;
		p[i] = (char*)malloc(k * sizeof(char));
		cout << "scrieti sirul cu nr " << i + 1 << " aici: ";
		for (j = 0; j < k; j++) cin >> *(p[i] + j);
		*(p[i] + k) = '\0';
	}
	p1 = (char*)malloc(x * sizeof(char));
	k = 0;
	for (i = 0; i < n; i++)
	{
		j = 0;
		while (*(p[i] + j) != '\0')
		{
			*(p1 + k) = *(p[i] + j);
			j++;
			k++;
		}

	}
	cout << "sirul format din concatenarea sirurilor introduse este:\n";
	for (i = 0; i < x; i++) cout << *(p1 + i);
	cout << endl;
	_getch();
	nr++;
	free(p);
	free(p1);
	} while (nr <=t);
}

10)
#define _CRT_SECURE_NO_WARNINGS
#include <iostream>
#include <conio.h>
#include <stdlib.h>
#include <malloc.h>
#include <math.h>
using namespace std;
int n;
void main()
{
	int i, j;
	int **p;
	cout << "dati dimensiunea pentru matrice: ";
	cin >> n;
	p = (int**)malloc(n * sizeof(int*));
	cout << "dati elementele matrici:\n";
	for (i = 0; i < n; i++)
	{
		p[i] = (int*)malloc(n * sizeof(int));
		for (j = 0; j < n; j++)
		{
			cin >> *(p[i] + j);
		}
	}
	int s = 0;
	for (i=0;i<n;i++)
		for (j = 0; j < n; j++)
		{
			if ((i > j) && (*(p[i]+j)%2==0)) s = s + *(p[i] + j);
		}
	cout << "suma elementelor cerute este: " << s;
	free(p);
	_getch();
}




