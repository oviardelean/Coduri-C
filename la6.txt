3)
package imageProcessor;

import java.io.*;
import java.util.Scanner;
import java.util.concurrent.TimeUnit;

public class MyImage {

	public int n;
	public int m;
	public Pixel[][] Matrix;

	public void getMatrix() {
		for (int i = 0; i < getN(); i++) {
			for (int j = 0; j < getM(); j++)
				System.out.print(Matrix[i][j].R + "/" + Matrix[i][j].G + "/" + Matrix[i][j].B + "       ");
			System.out.println();
		}
	}

	public void setMatrix() {
		Matrix = new Pixel[n][m];
		for (int i = 0; i < n; i++)
			for (int j = 0; j < m; j++) {
				this.Matrix[i][j] = new Pixel();
				this.Matrix[i][j].R = (int) (Math.random() * 256 + 1);
				this.Matrix[i][j].G = (int) (Math.random() * 256 + 1);
				this.Matrix[i][j].B = (int) (Math.random() * 256 + 1);
			}
	}

	public int getN() {
		return n;
	}

	public void setN(int n) {
		this.n = n;
	}

	public int getM() {
		return m;
	}

	public void setM(int m) {
		this.m = m;
	}

	public void deletePixels(int x, int y, int z) {
		long startTime = System.nanoTime();
		for (int i = 0; i < n; i++)
			for (int j = 0; j < m; j++) {
				if (Matrix[i][j].R > x) {
					Matrix[i][j].R = 0;
					Matrix[i][j].G=0;
					Matrix[i][j].B=0;
					continue;
				}
				if (Matrix[i][j].G > y) {
					Matrix[i][j].R = 0;
					Matrix[i][j].G=0;
					Matrix[i][j].B=0;
					continue;
				}
				if (Matrix[i][j].B > z) {
					Matrix[i][j].R = 0;
					Matrix[i][j].G=0;
					Matrix[i][j].B=0;
					continue;
				}
			}
		long endTime = System.nanoTime();
		System.out.println((endTime - startTime) + " ns");
	}

	public void deletePixel() {
		long startTime = System.nanoTime();
		Scanner input = new Scanner(System.in);
		System.out.println("Ce eliminam R/G/B?");
		char c = input.next().charAt(0);
		if (c == 'R') {
			for (int i = 0; i < n; i++)
				for (int j = 0; j < m; j++)
					Matrix[i][j].R = 0;
		} else if (c == 'G') {
			for (int i = 0; i < n; i++)
				for (int j = 0; j < m; j++)
					Matrix[i][j].G = 0;
		} else if (c == 'B') {
			for (int i = 0; i < n; i++)
				for (int j = 0; j < m; j++)
					Matrix[i][j].B = 0;
		} else
			System.out.println("Pixel incorect.");
		long endTime = System.nanoTime();
		System.out.println((endTime - startTime) + " ns");
	}

	public void transformPixels() {
		long start = System.currentTimeMillis();
		for (int i = 0; i < n; i++)
			for (int j = 0; j < m; j++) {
				Matrix[i][j].R = (int)( 0.26 * Matrix[i][j].R+0.71*Matrix[i][j].G+0.07*Matrix[i][j].B);
				Matrix[i][j].G = (int)( 0.26 * Matrix[i][j].R+0.71*Matrix[i][j].G+0.07*Matrix[i][j].B);
				Matrix[i][j].B = (int)( 0.26 * Matrix[i][j].R+0.71*Matrix[i][j].G+0.07*Matrix[i][j].B);
			}
		long end = System.currentTimeMillis();
		System.out.println((end - start) + " ns");
	}
}

class Pixel {
	Pixel() {
		R = 0;
		G = 0;
		B = 0;
	}

	public int R;
	public int G;
	public int B;
}

class Test {
	public static void main(String[] args) {
		Scanner input = new Scanner(System.in);
		MyImage obj = new MyImage();
		int n = 4;
		int m = 4;
		obj.setN(n);
		obj.setM(m);

		obj.setMatrix();
		obj.getMatrix();

		System.out.println("Introduceti valori pentru R G B pe care nu doriti sa le depasiti:");
		int x = input.nextInt();
		int y = input.nextInt();
		int z = input.nextInt();
		obj.deletePixels(x, y, z);
		obj.getMatrix();

		obj.deletePixel();
		obj.getMatrix();

		System.out.println("Transformam in gri:");
		obj.transformPixels();
		obj.getMatrix();
	}
}

4)
import java.util.Scanner;
public class Test {

	public static void main(String[] args) {
		Double[] v=new Double[7];
		Scanner input=new Scanner(System.in);
		for (int i=0;i<7;i++) {
			v[i]=input.nextDouble();
		}
		int x=1;
		do {
			try {
				System.out.println("introduceti un index:");
				int k=input.nextInt();
				if ((k>v.length)||(k<0)) throw new IndexOutOfBoundsException("Gresit");
				else x=2;
			}catch (IndexOutOfBoundsException e) {
				System.out.println("am prins exceptia.");
			}
			
		}while (x==1);
	}

}
